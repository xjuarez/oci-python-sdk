# coding: utf-8
# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250101

import oci  # noqa: F401
from oci.util import WAIT_RESOURCE_NOT_FOUND  # noqa: F401


class DistributedAutonomousDbServiceClientCompositeOperations(object):
    """
    This class provides a wrapper around :py:class:`~oci.distributed_database.DistributedAutonomousDbServiceClient` and offers convenience methods
    for operations that would otherwise need to be chained together. For example, instead of performing an action
    on a resource (e.g. launching an instance, creating a load balancer) and then using a waiter to wait for the resource
    to enter a given state, you can call a single method in this class to accomplish the same functionality
    """

    def __init__(self, client, **kwargs):
        """
        Creates a new DistributedAutonomousDbServiceClientCompositeOperations object

        :param DistributedAutonomousDbServiceClient client:
            The service client which will be wrapped by this object
        """
        self.client = client

    def add_distributed_autonomous_database_gds_control_node_and_wait_for_state(self, distributed_autonomous_database_id, add_distributed_autonomous_database_gds_control_node_details, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.add_distributed_autonomous_database_gds_control_node` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param oci.distributed_database.models.AddDistributedAutonomousDatabaseGdsControlNodeDetails add_distributed_autonomous_database_gds_control_node_details: (required)
            Details required to provision the new Global database services control(GDS CTL) node for the Distributed autonomous database.

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.add_distributed_autonomous_database_gds_control_node`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.add_distributed_autonomous_database_gds_control_node(distributed_autonomous_database_id, add_distributed_autonomous_database_gds_control_node_details, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def change_distributed_autonomous_database_compartment_and_wait_for_state(self, change_distributed_autonomous_database_compartment_details, distributed_autonomous_database_id, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.change_distributed_autonomous_database_compartment` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param oci.distributed_database.models.ChangeDistributedAutonomousDatabaseCompartmentDetails change_distributed_autonomous_database_compartment_details: (required)
            Request to move the Globally distributed autonomous database to a different compartment.

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.change_distributed_autonomous_database_compartment`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.change_distributed_autonomous_database_compartment(change_distributed_autonomous_database_compartment_details, distributed_autonomous_database_id, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def configure_distributed_autonomous_database_gsms_and_wait_for_state(self, configure_distributed_autonomous_database_gsms_details, distributed_autonomous_database_id, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.configure_distributed_autonomous_database_gsms` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param oci.distributed_database.models.ConfigureDistributedAutonomousDatabaseGsmsDetails configure_distributed_autonomous_database_gsms_details: (required)
            Details to configure the new GSM instances for the distributed autonomous database.

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.configure_distributed_autonomous_database_gsms`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.configure_distributed_autonomous_database_gsms(configure_distributed_autonomous_database_gsms_details, distributed_autonomous_database_id, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def configure_distributed_autonomous_database_sharding_and_wait_for_state(self, distributed_autonomous_database_id, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.configure_distributed_autonomous_database_sharding` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.configure_distributed_autonomous_database_sharding`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.configure_distributed_autonomous_database_sharding(distributed_autonomous_database_id, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def create_distributed_autonomous_database_and_wait_for_state(self, create_distributed_autonomous_database_details, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.create_distributed_autonomous_database` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param oci.distributed_database.models.CreateDistributedAutonomousDatabaseDetails create_distributed_autonomous_database_details: (required)
            Details of the Globally distributed autonomous database to be created.

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.create_distributed_autonomous_database`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.create_distributed_autonomous_database(create_distributed_autonomous_database_details, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def delete_distributed_autonomous_database_and_wait_for_state(self, distributed_autonomous_database_id, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.delete_distributed_autonomous_database` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.delete_distributed_autonomous_database`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = None
        try:
            operation_result = self.client.delete_distributed_autonomous_database(distributed_autonomous_database_id, **operation_kwargs)
        except oci.exceptions.ServiceError as e:
            if e.status == 404:
                return WAIT_RESOURCE_NOT_FOUND
            else:
                raise e

        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def generate_distributed_autonomous_database_gsm_certificate_signing_request_and_wait_for_state(self, distributed_autonomous_database_id, ca_bundle_id, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.generate_distributed_autonomous_database_gsm_certificate_signing_request` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param str ca_bundle_id: (required)
            The ID of the Ca Bundle.

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.generate_distributed_autonomous_database_gsm_certificate_signing_request`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.generate_distributed_autonomous_database_gsm_certificate_signing_request(distributed_autonomous_database_id, ca_bundle_id, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def patch_distributed_autonomous_database_and_wait_for_state(self, distributed_autonomous_database_id, patch_distributed_autonomous_database_details, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.patch_distributed_autonomous_database` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param oci.distributed_database.models.PatchDistributedAutonomousDatabaseDetails patch_distributed_autonomous_database_details: (required)
            The payload containing instructions to patch the Globally distributed autonomous database.

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.patch_distributed_autonomous_database`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.patch_distributed_autonomous_database(distributed_autonomous_database_id, patch_distributed_autonomous_database_details, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def rotate_distributed_autonomous_database_passwords_and_wait_for_state(self, distributed_autonomous_database_id, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.rotate_distributed_autonomous_database_passwords` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.rotate_distributed_autonomous_database_passwords`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.rotate_distributed_autonomous_database_passwords(distributed_autonomous_database_id, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def start_distributed_autonomous_database_and_wait_for_state(self, distributed_autonomous_database_id, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.start_distributed_autonomous_database` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.start_distributed_autonomous_database`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.start_distributed_autonomous_database(distributed_autonomous_database_id, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def stop_distributed_autonomous_database_and_wait_for_state(self, distributed_autonomous_database_id, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.stop_distributed_autonomous_database` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.stop_distributed_autonomous_database`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.stop_distributed_autonomous_database(distributed_autonomous_database_id, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def update_distributed_autonomous_database_and_wait_for_state(self, distributed_autonomous_database_id, update_distributed_autonomous_database_details, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.update_distributed_autonomous_database` and waits for the :py:class:`~oci.distributed_database.models.DistributedAutonomousDatabase` acted upon
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param oci.distributed_database.models.UpdateDistributedAutonomousDatabaseDetails update_distributed_autonomous_database_details: (required)
            The configuration of the Globally distributed autonomous database to be updated.

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.DistributedAutonomousDatabase.lifecycle_state`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.update_distributed_autonomous_database`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.update_distributed_autonomous_database(distributed_autonomous_database_id, update_distributed_autonomous_database_details, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        distributed_autonomous_database_id = operation_result.data.id

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_distributed_autonomous_database(distributed_autonomous_database_id),  # noqa: F821
                evaluate_response=lambda r: getattr(r.data, 'lifecycle_state') and getattr(r.data, 'lifecycle_state').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except (NameError, TypeError) as e:
            if not e.args:
                e.args = ('',)
            e.args = e.args + ('This composite operation is currently not supported in the SDK. Please use the operation from the service client and use waiters as an alternative. For more information on waiters, visit: "https://docs.oracle.com/en-us/iaas/tools/python/latest/api/waiters.html"', )
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def upload_distributed_autonomous_database_signed_certificate_and_generate_wallet_and_wait_for_state(self, distributed_autonomous_database_id, upload_distributed_autonomous_database_signed_certificate_and_generate_wallet_details, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.upload_distributed_autonomous_database_signed_certificate_and_generate_wallet` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param oci.distributed_database.models.UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletDetails upload_distributed_autonomous_database_signed_certificate_and_generate_wallet_details: (required)
            Details required to upload the CA signed certificates to GSM instances of Globally distributed autonomous database and generate
            the wallets.

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.upload_distributed_autonomous_database_signed_certificate_and_generate_wallet`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.upload_distributed_autonomous_database_signed_certificate_and_generate_wallet(distributed_autonomous_database_id, upload_distributed_autonomous_database_signed_certificate_and_generate_wallet_details, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)

    def validate_distributed_autonomous_database_network_and_wait_for_state(self, distributed_autonomous_database_id, wait_for_states=[], operation_kwargs={}, waiter_kwargs={}):
        """
        Calls :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.validate_distributed_autonomous_database_network` and waits for the :py:class:`~oci.distributed_database.models.WorkRequest`
        to enter the given state(s).

        :param str distributed_autonomous_database_id: (required)
            Globally distributed autonomous database identifier

        :param list[str] wait_for_states:
            An array of states to wait on. These should be valid values for :py:attr:`~oci.distributed_database.models.WorkRequest.status`

        :param dict operation_kwargs:
            A dictionary of keyword arguments to pass to :py:func:`~oci.distributed_database.DistributedAutonomousDbServiceClient.validate_distributed_autonomous_database_network`

        :param dict waiter_kwargs:
            A dictionary of keyword arguments to pass to the :py:func:`oci.wait_until` function. For example, you could pass ``max_interval_seconds`` or ``max_interval_seconds``
            as dictionary keys to modify how long the waiter function will wait between retries and the maximum amount of time it will wait
        """
        operation_result = self.client.validate_distributed_autonomous_database_network(distributed_autonomous_database_id, **operation_kwargs)
        if not wait_for_states:
            return operation_result
        lowered_wait_for_states = [w.lower() for w in wait_for_states]
        if 'opc-work-request-id' not in operation_result.headers:
            return operation_result
        wait_for_resource_id = operation_result.headers['opc-work-request-id']

        try:
            waiter_result = oci.wait_until(
                self.client,
                self.client.get_work_request(wait_for_resource_id),
                evaluate_response=lambda r: getattr(r.data, 'status') and getattr(r.data, 'status').lower() in lowered_wait_for_states,
                **waiter_kwargs
            )
            result_to_return = waiter_result

            return result_to_return
        except Exception as e:
            raise oci.exceptions.CompositeOperationError(partial_results=[operation_result], cause=e)
