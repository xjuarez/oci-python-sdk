# coding: utf-8
# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240531

from .http_endpoint_auth_scope_config import HttpEndpointAuthScopeConfig
from oci.util import formatted_flat_dict, NONE_SENTINEL, value_allowed_none_or_none_sentinel  # noqa: F401
from oci.decorators import init_model_state_from_kwargs


@init_model_state_from_kwargs
class HttpEndpointBasicAuthScopeConfig(HttpEndpointAuthScopeConfig):
    """
    Specifies HTTP Basic Authentication using base64-encoded username:password credentials injected into the `Authorization` header.

    - If `authScope = AGENT`: Credentials are securely retrieved from OCI Vault.
    """

    def __init__(self, **kwargs):
        """
        Initializes a new HttpEndpointBasicAuthScopeConfig object with values from keyword arguments. The default value of the :py:attr:`~oci.generative_ai_agent.models.HttpEndpointBasicAuthScopeConfig.http_endpoint_auth_scope_config_type` attribute
        of this class is ``HTTP_ENDPOINT_BASIC_AUTH_SCOPE_CONFIG`` and it should not be changed.
        The following keyword arguments are supported (corresponding to the getters/setters of this class):

        :param http_endpoint_auth_scope_config_type:
            The value to assign to the http_endpoint_auth_scope_config_type property of this HttpEndpointBasicAuthScopeConfig.
            Allowed values for this property are: "HTTP_ENDPOINT_NO_AUTH_SCOPE_CONFIG", "HTTP_ENDPOINT_BASIC_AUTH_SCOPE_CONFIG", "HTTP_ENDPOINT_BEARER_AUTH_SCOPE_CONFIG", "HTTP_ENDPOINT_API_KEY_AUTH_SCOPE_CONFIG", "HTTP_ENDPOINT_IDCS_AUTH_SCOPE_CONFIG", "HTTP_ENDPOINT_OCI_AUTH_SCOPE_CONFIG"
        :type http_endpoint_auth_scope_config_type: str

        :param vault_secret_id:
            The value to assign to the vault_secret_id property of this HttpEndpointBasicAuthScopeConfig.
        :type vault_secret_id: str

        """
        self.swagger_types = {
            'http_endpoint_auth_scope_config_type': 'str',
            'vault_secret_id': 'str'
        }
        self.attribute_map = {
            'http_endpoint_auth_scope_config_type': 'httpEndpointAuthScopeConfigType',
            'vault_secret_id': 'vaultSecretId'
        }
        self._http_endpoint_auth_scope_config_type = None
        self._vault_secret_id = None
        self._http_endpoint_auth_scope_config_type = 'HTTP_ENDPOINT_BASIC_AUTH_SCOPE_CONFIG'

    @property
    def vault_secret_id(self):
        """
        Gets the vault_secret_id of this HttpEndpointBasicAuthScopeConfig.
        The OCID of the vault secret with username:password.
        Required when `authScope` is AGENT.


        :return: The vault_secret_id of this HttpEndpointBasicAuthScopeConfig.
        :rtype: str
        """
        return self._vault_secret_id

    @vault_secret_id.setter
    def vault_secret_id(self, vault_secret_id):
        """
        Sets the vault_secret_id of this HttpEndpointBasicAuthScopeConfig.
        The OCID of the vault secret with username:password.
        Required when `authScope` is AGENT.


        :param vault_secret_id: The vault_secret_id of this HttpEndpointBasicAuthScopeConfig.
        :type: str
        """
        self._vault_secret_id = vault_secret_id

    def __repr__(self):
        return formatted_flat_dict(self)

    def __eq__(self, other):
        if other is None:
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not self == other
