# coding: utf-8
# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107


from oci.util import formatted_flat_dict, NONE_SENTINEL, value_allowed_none_or_none_sentinel  # noqa: F401
from oci.decorators import init_model_state_from_kwargs


@init_model_state_from_kwargs
class OccCapacityRequestBaseDetails(object):
    """
    The details of the create capacity request. This model serves as a base for different namespaces.
    """

    #: A constant which can be used with the resource_type property of a OccCapacityRequestBaseDetails.
    #: This constant has a value of "SERVER_HW"
    RESOURCE_TYPE_SERVER_HW = "SERVER_HW"

    def __init__(self, **kwargs):
        """
        Initializes a new OccCapacityRequestBaseDetails object with values from keyword arguments. This class has the following subclasses and if you are using this class as input
        to a service operations then you should favor using a subclass over the base class:

        * :class:`~oci.capacity_management.models.OccCapacityRequestComputeDetails`

        The following keyword arguments are supported (corresponding to the getters/setters of this class):

        :param resource_type:
            The value to assign to the resource_type property of this OccCapacityRequestBaseDetails.
            Allowed values for this property are: "SERVER_HW", 'UNKNOWN_ENUM_VALUE'.
            Any unrecognized values returned by a service will be mapped to 'UNKNOWN_ENUM_VALUE'.
        :type resource_type: str

        :param workload_type:
            The value to assign to the workload_type property of this OccCapacityRequestBaseDetails.
        :type workload_type: str

        :param expected_handover_quantity:
            The value to assign to the expected_handover_quantity property of this OccCapacityRequestBaseDetails.
        :type expected_handover_quantity: int

        :param date_expected_handover:
            The value to assign to the date_expected_handover property of this OccCapacityRequestBaseDetails.
        :type date_expected_handover: datetime

        :param actual_handover_quantity:
            The value to assign to the actual_handover_quantity property of this OccCapacityRequestBaseDetails.
        :type actual_handover_quantity: int

        :param date_actual_handover:
            The value to assign to the date_actual_handover property of this OccCapacityRequestBaseDetails.
        :type date_actual_handover: datetime

        """
        self.swagger_types = {
            'resource_type': 'str',
            'workload_type': 'str',
            'expected_handover_quantity': 'int',
            'date_expected_handover': 'datetime',
            'actual_handover_quantity': 'int',
            'date_actual_handover': 'datetime'
        }

        self.attribute_map = {
            'resource_type': 'resourceType',
            'workload_type': 'workloadType',
            'expected_handover_quantity': 'expectedHandoverQuantity',
            'date_expected_handover': 'dateExpectedHandover',
            'actual_handover_quantity': 'actualHandoverQuantity',
            'date_actual_handover': 'dateActualHandover'
        }

        self._resource_type = None
        self._workload_type = None
        self._expected_handover_quantity = None
        self._date_expected_handover = None
        self._actual_handover_quantity = None
        self._date_actual_handover = None

    @staticmethod
    def get_subtype(object_dictionary):
        """
        Given the hash representation of a subtype of this class,
        use the info in the hash to return the class of the subtype.
        """
        type = object_dictionary['resourceType']

        if type == 'SERVER_HW':
            return 'OccCapacityRequestComputeDetails'
        else:
            return 'OccCapacityRequestBaseDetails'

    @property
    def resource_type(self):
        """
        **[Required]** Gets the resource_type of this OccCapacityRequestBaseDetails.
        The type of the resource against which the user wants to place a capacity request.

        Allowed values for this property are: "SERVER_HW", 'UNKNOWN_ENUM_VALUE'.
        Any unrecognized values returned by a service will be mapped to 'UNKNOWN_ENUM_VALUE'.


        :return: The resource_type of this OccCapacityRequestBaseDetails.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """
        Sets the resource_type of this OccCapacityRequestBaseDetails.
        The type of the resource against which the user wants to place a capacity request.


        :param resource_type: The resource_type of this OccCapacityRequestBaseDetails.
        :type: str
        """
        allowed_values = ["SERVER_HW"]
        if not value_allowed_none_or_none_sentinel(resource_type, allowed_values):
            resource_type = 'UNKNOWN_ENUM_VALUE'
        self._resource_type = resource_type

    @property
    def workload_type(self):
        """
        **[Required]** Gets the workload_type of this OccCapacityRequestBaseDetails.
        The type of the workload (Generic/ROW).


        :return: The workload_type of this OccCapacityRequestBaseDetails.
        :rtype: str
        """
        return self._workload_type

    @workload_type.setter
    def workload_type(self, workload_type):
        """
        Sets the workload_type of this OccCapacityRequestBaseDetails.
        The type of the workload (Generic/ROW).


        :param workload_type: The workload_type of this OccCapacityRequestBaseDetails.
        :type: str
        """
        self._workload_type = workload_type

    @property
    def expected_handover_quantity(self):
        """
        Gets the expected_handover_quantity of this OccCapacityRequestBaseDetails.
        The incremental quantity of resources supplied as the provisioning is underway.


        :return: The expected_handover_quantity of this OccCapacityRequestBaseDetails.
        :rtype: int
        """
        return self._expected_handover_quantity

    @expected_handover_quantity.setter
    def expected_handover_quantity(self, expected_handover_quantity):
        """
        Sets the expected_handover_quantity of this OccCapacityRequestBaseDetails.
        The incremental quantity of resources supplied as the provisioning is underway.


        :param expected_handover_quantity: The expected_handover_quantity of this OccCapacityRequestBaseDetails.
        :type: int
        """
        self._expected_handover_quantity = expected_handover_quantity

    @property
    def date_expected_handover(self):
        """
        Gets the date_expected_handover of this OccCapacityRequestBaseDetails.
        The date on which the latest increment to supplied quantity of resources was delivered.


        :return: The date_expected_handover of this OccCapacityRequestBaseDetails.
        :rtype: datetime
        """
        return self._date_expected_handover

    @date_expected_handover.setter
    def date_expected_handover(self, date_expected_handover):
        """
        Sets the date_expected_handover of this OccCapacityRequestBaseDetails.
        The date on which the latest increment to supplied quantity of resources was delivered.


        :param date_expected_handover: The date_expected_handover of this OccCapacityRequestBaseDetails.
        :type: datetime
        """
        self._date_expected_handover = date_expected_handover

    @property
    def actual_handover_quantity(self):
        """
        Gets the actual_handover_quantity of this OccCapacityRequestBaseDetails.
        The actual handed over quantity of resources at the time of request resolution.


        :return: The actual_handover_quantity of this OccCapacityRequestBaseDetails.
        :rtype: int
        """
        return self._actual_handover_quantity

    @actual_handover_quantity.setter
    def actual_handover_quantity(self, actual_handover_quantity):
        """
        Sets the actual_handover_quantity of this OccCapacityRequestBaseDetails.
        The actual handed over quantity of resources at the time of request resolution.


        :param actual_handover_quantity: The actual_handover_quantity of this OccCapacityRequestBaseDetails.
        :type: int
        """
        self._actual_handover_quantity = actual_handover_quantity

    @property
    def date_actual_handover(self):
        """
        Gets the date_actual_handover of this OccCapacityRequestBaseDetails.
        The date on which the actual handover quantity of resources is delivered.


        :return: The date_actual_handover of this OccCapacityRequestBaseDetails.
        :rtype: datetime
        """
        return self._date_actual_handover

    @date_actual_handover.setter
    def date_actual_handover(self, date_actual_handover):
        """
        Sets the date_actual_handover of this OccCapacityRequestBaseDetails.
        The date on which the actual handover quantity of resources is delivered.


        :param date_actual_handover: The date_actual_handover of this OccCapacityRequestBaseDetails.
        :type: datetime
        """
        self._date_actual_handover = date_actual_handover

    def __repr__(self):
        return formatted_flat_dict(self)

    def __eq__(self, other):
        if other is None:
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not self == other
